CONST X R1
CONST Y R2
CONST I R3
CONST J R4
CONST T1 R5
CONST T2 R6
CONST CURSOR_X R7
CONST CURSOR_Y R8
CONST ADDR R9
CONST TX R10
CONST TY R11
CONST NX R12
CONST NY R13
CONST CNT R14
CONST KEY_CODE R15
CONST ARG_X R16
CONST ARG_Y R17
CONST MINE_NUM R18
CONST SCREEN_WIDTH 128
CONST SCREEN_HEIGHT 72
CONST GRID_WIDTH 121
CONST GRID_HEIGHT 65
CONST TILE_SIZE 8
CONST GRID_COLS 15
CONST GRID_ROWS 8
CONST COLOR_BACK 0x181A1B
CONST COLOR_HIDDEN 0x4C545C
CONST COLOR_REVEALED 0x384048
CONST COLOR_GRID_LINE 0x22262E
CONST COLOR_CURSOR 0xD6BB15
CONST COLOR_MINE 0x000000
CONST COLOR_MINE_BACK 0xEE6666
CONST COLOR_FLAG 0xF75050
CONST COLOR_POLE 0xD8E0E8
CONST COLOR_NUM1 0x7CC7FF
CONST COLOR_NUM2 0x66C266
CONST COLOR_NUM3 0xFF7788
CONST COLOR_NUM4 0xEE88FF
CONST COLOR_NUM5 0xDDAA22
CONST MINE_NUM_MAX 16
CONST AROUND_COUNT_MASK 7
CONST MINE_MASK 8
CONST REVEAL_MASK 16
CONST FLAG_MASK 32
CONST KEY_UP 70
CONST KEY_DOWN 72
CONST KEY_LEFT 69
CONST KEY_RIGHT 71
CONST KEY_REVEAL 55
CONST KEY_FLAG 56



JMP MAIN



INIT_SCREEN:
	#画背景
	CLR X
	CLR Y
	SETCOLOR COLOR_BACK
	DRAW_BACK:
		PSET X Y
		INC X
		BLT X SCREEN_WIDTH DRAW_BACK
		INC Y
		CLR X
		BLT Y SCREEN_HEIGHT DRAW_BACK

	# 画格子
	CLR X
	CLR Y
	SETCOLOR COLOR_HIDDEN
	DRAW_GRID:
		PSET X Y
		INC X
		BLT X GRID_WIDTH DRAW_GRID
		INC Y
		CLR X
		BLT Y GRID_HEIGHT DRAW_GRID

	# 画分隔线
	CLR X
	CLR Y
	SETCOLOR COLOR_GRID_LINE
	DRAW_GRID_LINE_ROW:
		PSET X Y
		INC X
		BLT X GRID_WIDTH DRAW_GRID_LINE_ROW
		ADD Y Y TILE_SIZE
		CLR X
		BLT Y GRID_HEIGHT DRAW_GRID_LINE_ROW
	CLR X
	CLR Y
	DRAW_GRID_LINE_COL:
		PSET X Y
		INC Y
		BLT Y GRID_HEIGHT DRAW_GRID_LINE_COL
		ADD X X TILE_SIZE
		CLR Y
		BLT X GRID_WIDTH DRAW_GRID_LINE_COL

	# 画光标
	CLR CURSOR_X
	CLR CURSOR_Y
	SETCOLOR COLOR_CURSOR
	CALL UPDATE_CURSOR

	RET


INIT_MINES:
	CLR I
	INIT_MINES_LOOP:
		RAND T1
		RAND T2
		MOD X T1 GRID_COLS
		MOD Y T2 GRID_ROWS
		MUL ADDR Y GRID_COLS
		ADD ADDR ADDR X
		LW T1 ADDR
		BEQ T1 MINE_MASK INIT_MINES_LOOP
		SW ADDR MINE_MASK
		INC I
		BLT I MINE_NUM INIT_MINES_LOOP

	RET


INIT_MINE_COUNTS:
	CLR X
	CLR Y
	CLR ADDR
	INIT_MINE_COUNTS_LOOP:
		CALL COUNT_AROUND_MINES
		LW T1 ADDR
		ADD T2 T1 CNT
		SW ADDR T2
		INC X
		INC ADDR
		BLT X GRID_COLS INIT_MINE_COUNTS_LOOP
		CLR X
		INC Y
		BLT Y GRID_ROWS INIT_MINE_COUNTS_LOOP

	RET


COUNT_AROUND_MINES:
	CLR CNT
	MOV TY -1
	DY_LOOP:
		MOV TX -1
	DX_LOOP:
		ADD NX X TX
		ADD NY Y TY

		# 越界判断
		BLT NX 0 SKIP_THIS_NEIGHBOR
		BGE NX GRID_COLS SKIP_THIS_NEIGHBOR
		BLT NY 0 SKIP_THIS_NEIGHBOR
		BGE NY GRID_ROWS SKIP_THIS_NEIGHBOR

		# 计算地址
		MUL T1 NY GRID_COLS
		ADD T1 T1 NX
		# 读取格子值
		LW T2 T1
		
		# 判断是否为地雷
		AND T2 T2 MINE_MASK
		CMP T2 MINE_MASK
		INC EQ CNT
	
	SKIP_THIS_NEIGHBOR:
		INC TX
		BLE TX 1 DX_LOOP

		INC TY
		BLE TY 1 DY_LOOP

	RET


MOVE_CURSOR:
	CMP KEY_CODE KEY_UP
	JMP EQ HANDLE_CURSOR_MOVE
	CMP KEY_CODE KEY_DOWN
	JMP EQ HANDLE_CURSOR_MOVE
	CMP KEY_CODE KEY_LEFT
	JMP EQ HANDLE_CURSOR_MOVE
	CMP KEY_CODE KEY_RIGHT
	JMP EQ HANDLE_CURSOR_MOVE
	RET
	HANDLE_CURSOR_MOVE:
	SETCOLOR COLOR_GRID_LINE
	CALL UPDATE_CURSOR
	CMP KEY_CODE KEY_UP
	DEC EQ CURSOR_Y
	CMP KEY_CODE KEY_DOWN
	INC EQ CURSOR_Y
	CMP KEY_CODE KEY_LEFT
	DEC EQ CURSOR_X
	CMP KEY_CODE KEY_RIGHT
	INC EQ CURSOR_X
	# 回绕
	CMP CURSOR_X 0
	MOV LT CURSOR_X 14
	CMP CURSOR_X GRID_COLS
	MOV GE CURSOR_X 0
	CMP CURSOR_Y 0
	MOV LT CURSOR_Y 7
	CMP CURSOR_Y GRID_ROWS
	MOV GE CURSOR_Y 0
	SETCOLOR COLOR_CURSOR
	CALL UPDATE_CURSOR

	RET


UPDATE_CURSOR:
	CLR I
	CLR J
	MUL X CURSOR_X TILE_SIZE
	MUL Y CURSOR_Y TILE_SIZE
	UPDATE_CURSOR_LOOP1:
		PSET X Y
		INC X
		INC I
		BLE I TILE_SIZE UPDATE_CURSOR_LOOP1
		MUL X CURSOR_X TILE_SIZE
		CLR I
		ADD Y Y TILE_SIZE
		INC J
		BEQ J 1 UPDATE_CURSOR_LOOP1
	MUL X CURSOR_X TILE_SIZE
	MUL Y CURSOR_Y TILE_SIZE
	UPDATE_CURSOR_LOOP2:
		PSET X Y
		INC Y
		INC I
		BLE I TILE_SIZE UPDATE_CURSOR_LOOP2
		MUL Y CURSOR_Y TILE_SIZE
		CLR I
		ADD X X TILE_SIZE
		INC J
		BEQ J 3 UPDATE_CURSOR_LOOP2

	RET


REVEAL_TILE:
    MUL ADDR CURSOR_Y GRID_COLS
    ADD ADDR ADDR CURSOR_X
	LW T1 ADDR
	AND T2 T1 REVEAL_MASK
	BNE T2 0 REVEAL_TILE_RET
	AND T2 T1 FLAG_MASK
	BNE T2 0 REVEAL_TILE_RET
	AND T2 T1 MINE_MASK
	BNE T2 0 LOSE_LOOP
	AND T2 T1 AROUND_COUNT_MASK
	MOV ARG_X CURSOR_X
	MOV ARG_Y CURSOR_Y
	CMP T2 0
	CALL EQ REVEAL_AROUND
	OR T1 T1 REVEAL_MASK
	SW ADDR T1
	CMP T2 1
	CALL EQ DRAW_NUM1
	CMP T2 2
	CALL EQ DRAW_NUM2
	CMP T2 3
	CALL EQ DRAW_NUM3
	CMP T2 4
	CALL EQ DRAW_NUM4
	CMP T2 5
	CALL EQ DRAW_NUM5

	REVEAL_TILE_RET:
		RET


REVEAL_AROUND:
    # 初始化当前坐标
    MOV NX CURSOR_X
    MOV NY CURSOR_Y

	REVEAL_AROUND_LOOP:
		# 越界检查
		BLT NX 0 REVEAL_AROUND_RET
		BGE NX GRID_COLS REVEAL_AROUND_RET
		BLT NY 0 REVEAL_AROUND_RET
		BGE NY GRID_ROWS REVEAL_AROUND_RET

		# 计算地址
		MUL ADDR NY GRID_COLS
		ADD ADDR ADDR NX
		LW T1 ADDR

		# 如果已揭示或有旗子，则返回
		AND T2 T1 REVEAL_MASK
		BNE T2 0 REVEAL_AROUND_RET
		AND T2 T1 FLAG_MASK
		BNE T2 0 REVEAL_AROUND_RET

		# 设置为已揭示
		OR T1 T1 REVEAL_MASK
		SW ADDR T1

		# 获取周围雷数
		AND T2 T1 AROUND_COUNT_MASK

		# 根据雷数绘图
		MOV ARG_X NX
		MOV ARG_Y NY
		CMP T2 0
		SETCOLOR EQ COLOR_REVEALED
		CALL EQ DRAW_TILE
		CMP T2 1
		CALL EQ DRAW_NUM1
		CMP T2 2
		CALL EQ DRAW_NUM2
		CMP T2 3
		CALL EQ DRAW_NUM3
		CMP T2 4
		CALL EQ DRAW_NUM4
		CMP T2 5
		CALL EQ DRAW_NUM5

		# 如果不是空白格，不再递归
		BNE T2 0 REVEAL_AROUND_RET

		# 递归
		# 向上
		DEC NY
		CALL REVEAL_AROUND_LOOP
		INC NY

		# 向下
		INC NY
		CALL REVEAL_AROUND_LOOP
		DEC NY

		# 向左
		DEC NX
		CALL REVEAL_AROUND_LOOP
		INC NX

		# 向右
		INC NX
		CALL REVEAL_AROUND_LOOP
		DEC NX

	REVEAL_AROUND_RET:
		RET



TOGGLE_FLAG:
    MUL ADDR CURSOR_Y GRID_COLS
    ADD ADDR ADDR CURSOR_X
	LW T1 ADDR

	AND T2 T1 REVEAL_MASK
	CMP T2 0
	RET NE

	AND T2 T1 FLAG_MASK
	CMP T2 0

	DEC EQ MINE_NUM
	OR EQ T1 T1 FLAG_MASK
	CALL EQ DRAW_FLAG

	INC NE MINE_NUM
	NOT NE T2 FLAG_MASK
	AND NE T1 T1 T2
	MOV ARG_X CURSOR_X
	MOV ARG_Y CURSOR_Y
	SETCOLOR NE COLOR_HIDDEN
	CALL NE DRAW_TILE

	SW ADDR T1

	RET


DRAW_TILE:
	CLR I
	CLR J
	MUL X ARG_X TILE_SIZE
	MUL Y ARG_Y TILE_SIZE
	INC X
	INC Y
	DRAW_TILE_LOOP:
		PSET X Y
		INC X
		INC I
		BLT I 7 DRAW_TILE_LOOP
		MUL X ARG_X TILE_SIZE
		INC X
		INC Y
		CLR I
		INC J
		BLT J 7 DRAW_TILE_LOOP

	RET


DRAW_FLAG:
	MUL X CURSOR_X TILE_SIZE
	MUL Y CURSOR_Y TILE_SIZE
	SETCOLOR COLOR_FLAG
	ADD X X 4
	ADD Y Y 2
	PSET X Y
	INC Y
	PSET X Y
	INC Y
	PSET X Y
	DEC X
	PSET X Y
	DEC X
	PSET X Y
	INC X
	DEC Y
	PSET X Y
	INC X
	ADD Y Y 2
	PSET X Y
	SUB X X 2
	INC Y
	SETCOLOR COLOR_POLE
	CLR I
	DRAW_POLE:
	PSET X Y
	INC X
	INC I
	BLT I 5 DRAW_POLE

	RET

DRAW_MINE:
	MUL X ARG_X TILE_SIZE
	MUL Y ARG_Y TILE_SIZE
	ADD X X 4
	ADD Y Y 2
	SETCOLOR COLOR_MINE
	PSET X Y
	INC Y
	PSET X Y
	DEC X
	PSET X Y
	ADD X X 2
	PSET X Y
	INC Y
	PSET X Y
	INC X
	PSET X Y
	SUB X X 2
	PSET X Y
	DEC X
	PSET X Y
	DEC X
	PSET X Y
	INC X
	INC Y
	PSET X Y
	INC X
	PSET X Y
	INC X
	PSET X Y
	DEC X
	INC Y
	PSET X Y

	RET
	

DRAW_NUM1:
	SETCOLOR COLOR_REVEALED
	CALL DRAW_TILE
	CLR I
	CLR J
	MUL X ARG_X TILE_SIZE
	MUL Y ARG_Y TILE_SIZE
	ADD X X 4
	ADD Y Y 2
	SETCOLOR COLOR_NUM1
	DRAW_NUM1_LOOP:
		PSET X Y
		INC Y
		INC I
		BLT I 5 DRAW_NUM1_LOOP

	RET


DRAW_NUM2:
	SETCOLOR COLOR_REVEALED
	CALL DRAW_TILE
	CLR I
	CLR J
	MUL X ARG_X TILE_SIZE
	MUL Y ARG_Y TILE_SIZE
	ADD X X 3
	ADD Y Y 2
	SETCOLOR COLOR_NUM2
	DRAW_NUM2_LOOP:
		PSET X Y
		INC X
		INC I
		BLT I 3 DRAW_NUM2_LOOP
		SUB X X 3
		ADD Y Y 2
		CLR I
		INC J
		BLT J 3 DRAW_NUM2_LOOP
		SUB Y Y 3
		PSET X Y
		ADD X X 2
		SUB Y Y 2
		PSET X Y

	RET


DRAW_NUM3:
	SETCOLOR COLOR_REVEALED
	CALL DRAW_TILE
	CLR I
	CLR J
	MUL X ARG_X TILE_SIZE
	MUL Y ARG_Y TILE_SIZE
	ADD X X 3
	ADD Y Y 2
	SETCOLOR COLOR_NUM3
	DRAW_NUM3_LOOP:
		PSET X Y
		INC X
		INC I
		BLT I 3 DRAW_NUM3_LOOP
		SUB X X 3
		ADD Y Y 2
		CLR I
		INC J
		BLT J 3 DRAW_NUM3_LOOP
		ADD X X 2
		SUB Y Y 3
		PSET X Y
		SUB Y Y 2
		PSET X Y

	RET


DRAW_NUM4:
	SETCOLOR COLOR_REVEALED
	CALL DRAW_TILE
	CLR I
	MUL X ARG_X TILE_SIZE
	MUL Y ARG_Y TILE_SIZE
	ADD X X 3
	ADD Y Y 2
	SETCOLOR COLOR_NUM4
	DRAW_NUM4_LOOP1:
	PSET X Y
	INC Y
	INC I
	BLT I 3 DRAW_NUM4_LOOP1
	INC X
	DEC Y
	PSET X Y
	INC X
	SUB Y Y 2
	DRAW_NUM4_LOOP2:
	PSET X Y
	INC Y
	INC I
	BLT I 8 DRAW_NUM4_LOOP2

	RET


DRAW_NUM5:
	SETCOLOR COLOR_REVEALED
	CALL DRAW_TILE
	CLR I
	CLR J
	MUL X ARG_X TILE_SIZE
	MUL Y ARG_Y TILE_SIZE
	ADD X X 3
	ADD Y Y 2
	SETCOLOR COLOR_NUM5
	DRAW_NUM5_LOOP:
		PSET X Y
		INC X
		INC I
		BLT I 3 DRAW_NUM5_LOOP
		SUB X X 3
		ADD Y Y 2
		CLR I
		INC J
		BLT J 3 DRAW_NUM5_LOOP
		SUB Y Y 5
		PSET X Y
		ADD X X 2
		ADD Y Y 2
		PSET X Y

	RET



MAIN:
#初始化
CALL INIT_SCREEN
MOV MINE_NUM MINE_NUM_MAX
CALL INIT_MINES
CALL INIT_MINE_COUNTS

	#主循环
	MAIN_LOOP:
		GET KEY_CODE
		CALL MOVE_CURSOR
		CMP KEY_CODE KEY_REVEAL
		CALL EQ REVEAL_TILE
		CMP KEY_CODE KEY_FLAG
		CALL EQ TOGGLE_FLAG
		OUTSEG MINE_NUM

		JMP MAIN_LOOP

	WIN_LOOP:

		JMP WIN_LOOP

	LOSE_LOOP:
		MOV ARG_X CURSOR_X
		MOV ARG_Y CURSOR_Y
		SETCOLOR COLOR_MINE_BACK
		CALL DRAW_TILE
		CALL DRAW_MINE

		CLR NY
		CLR ADDR
		LOSE_ROW_LOOP:
			CLR NX
		LOSE_COL_LOOP:
			BNE NX CURSOR_X LOSE_LOOP_CONT
			BNE NY CURSOR_Y LOSE_LOOP_CONT
			JMP SKIP_DRAW
			LOSE_LOOP_CONT:
			LW T1 ADDR
			AND T2 T1 MINE_MASK
			CMP T2 0
			MOV NE ARG_X NX
			MOV NE ARG_Y NY
			SETCOLOR NE COLOR_REVEALED
			CALL NE DRAW_TILE
			CMP T2 0
			CALL NE DRAW_MINE
			SKIP_DRAW:
			INC NX
			INC ADDR
			BLT NX GRID_COLS LOSE_COL_LOOP
			INC NY
			BLT NY GRID_ROWS LOSE_ROW_LOOP

	HALT_GAME:
		JMP HALT_GAME